import { AxiosRequestConfig } from 'axios';
import { RegisterEmailRequest, RegisterEmailResponse, RegisterEmailWithSecretResponse, RegisterEmailWithSecretRequest, UpdatePasswordRequest, UpdatePasswordResponse, UpdatePasswordJwtRequest, UpdatePasswordJwtResponse, RequestPasswordResetRequest, RequestPasswordResetResponse, NewAccessTokenRequest, NewAccessTokenResponse, LoginEmailRequest, LoginEmailResponse, LoginOauthRequest, LoginOauthResponse, SetUserGroupByEmailRequest, SetUserGroupByEmailResponse, LogoutRequest, LogoutResponse, CreateAttributesRequest, CreateAttributesResponse, UpdateAttributesRequest, UpdateAttributesResponse, DeleteAttributesRequest, DeleteAttributesResponse, GetAttributeHeadersByTypesRequest, GetAttributeHeadersByTypesResponse, GetAttributesByIdsRequest, GetAttributesByIdsRequestResponse, CreateProfileRequest, CreateProfileResponse, DeleteProfileRequest, DeleteProfileResponse, GetOwnedProfileHeadersRequest, GetOwnedProfileHeadersResponse, ModifyProfileComponentsRequest, ModifyProfileComponentsResponse, GetProfileByIdRequest, GetProfileByIdResponse, GetFlatProfileByIdRequest, GetFlatProfileByIdResponse, UpdateProfileRequest, UpdateProfileResponse, GetProfileByTokenRequest, GetProfileByTokenResponse, CreateProfilePrivTokenRequest, CreateProfilePrivTokenResponse, GetProfilePrivsRequest, GetProfilePrivsResponse, UpdateProfilePrivRequest, UpdateProfilePrivResponse, DeleteProfilePrivRequest, DeleteProfilePrivResponse, SendProfileTokenByEmailRequest, SendProfileTokenByEmailResponse, GetLogHeadersByTypesRequest, GetLogHeadersByTypesResponse, GetLogsByIdsRequest, GetLogsByIdsResponse, GetLatestLogsByTypesRequest, GetLatestLogsByTypesResponse, SubmitWorkflowTokenRequest, SubmitWorkflowTokenResponse, CreateClaimRequest, CreateClaimResponse } from '../interfaces';
export declare class AsteroidUserRpc {
    static registerEmail(rpcUrl: string, params: RegisterEmailRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<RegisterEmailResponse>;
    static registerEmailWithSecret(rpcUrl: string, params: RegisterEmailWithSecretRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<RegisterEmailWithSecretResponse>;
    static updatePassword(rpcUrl: string, params: UpdatePasswordRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<UpdatePasswordResponse>;
    static updatePasswordJwt(rpcUrl: string, params: UpdatePasswordJwtRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<UpdatePasswordJwtResponse>;
    static requestPasswordReset(rpcUrl: string, params: RequestPasswordResetRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<RequestPasswordResetResponse>;
    static loginEmail(rpcUrl: string, params: LoginEmailRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<LoginEmailResponse>;
    static loginOauth(rpcUrl: string, params: LoginOauthRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<LoginOauthResponse>;
    static setUserGroupByEmail(rpcUrl: string, params: SetUserGroupByEmailRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<SetUserGroupByEmailResponse>;
    static newAccessToken(rpcUrl: string, params: NewAccessTokenRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<NewAccessTokenResponse>;
    static logout(rpcUrl: string, params: LogoutRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<LogoutResponse>;
    static createAttributes(rpcUrl: string, params: CreateAttributesRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<CreateAttributesResponse>;
    static updateAttributes(rpcUrl: string, params: UpdateAttributesRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<UpdateAttributesResponse>;
    static deleteAttributes(rpcUrl: string, params: DeleteAttributesRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<DeleteAttributesResponse>;
    static getAttributeHeadersByTypes(rpcUrl: string, params: GetAttributeHeadersByTypesRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<GetAttributeHeadersByTypesResponse>;
    static getAttributesByIds(rpcUrl: string, params: GetAttributesByIdsRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<GetAttributesByIdsRequestResponse>;
    static createProfile(rpcUrl: string, params: CreateProfileRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<CreateProfileResponse>;
    static deleteProfile(rpcUrl: string, params: DeleteProfileRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<DeleteProfileResponse>;
    static getOwnedProfileHeaders(rpcUrl: string, params: GetOwnedProfileHeadersRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<GetOwnedProfileHeadersResponse>;
    static modifyProfileComponents(rpcUrl: string, params: ModifyProfileComponentsRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<ModifyProfileComponentsResponse>;
    static getProfileById(rpcUrl: string, params: GetProfileByIdRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<GetProfileByIdResponse>;
    static getFlatProfileById(rpcUrl: string, params: GetFlatProfileByIdRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<GetFlatProfileByIdResponse>;
    static updateProfile(rpcUrl: string, params: UpdateProfileRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<UpdateProfileResponse>;
    static getProfileByToken(rpcUrl: string, params: GetProfileByTokenRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<GetProfileByTokenResponse>;
    static createProfilePrivToken(rpcUrl: string, params: CreateProfilePrivTokenRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<CreateProfilePrivTokenResponse>;
    static getProfilePrivs(rpcUrl: string, params: GetProfilePrivsRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<GetProfilePrivsResponse>;
    static updateProfilePriv(rpcUrl: string, params: UpdateProfilePrivRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<UpdateProfilePrivResponse>;
    static deleteProfilePriv(rpcUrl: string, params: DeleteProfilePrivRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<DeleteProfilePrivResponse>;
    static sendProfileTokenByEmail(rpcUrl: string, params: SendProfileTokenByEmailRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<SendProfileTokenByEmailResponse>;
    static getLogHeadersByTypes(rpcUrl: string, params: GetLogHeadersByTypesRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<GetLogHeadersByTypesResponse>;
    static getLogsByIds(rpcUrl: string, params: GetLogsByIdsRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<GetLogsByIdsResponse>;
    static getLatestLogsByTypes(rpcUrl: string, params: GetLatestLogsByTypesRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<GetLatestLogsByTypesResponse>;
    static submitWorkflowToken(rpcUrl: string, params: SubmitWorkflowTokenRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<SubmitWorkflowTokenResponse>;
    static createClaim(rpcUrl: string, params: CreateClaimRequest, id?: string, methodVersion?: number, config?: AxiosRequestConfig): Promise<CreateClaimResponse>;
}
